#!/bin/bash

rvm_meta_author="Wayne E. Seguin"
rvm_meta_author_email="wayneeseguin@gmail.com"
rvm_meta_website="http://rvm.beginrescueend.com/"
rvm_meta_version="0.0.24"
rvm_meta_updated="2009.08.25"

#
# License: See LICENSE
#

#
# Functions
#
function rvm-usage {

  cat <<-Usage

  About:

    rvm ${rvm_meta_version} ${rvm_meta_website}

    by ${rvm_meta_author} (${rvm_meta_author_email})

  Installation:

    $ gem install rvm             # Install the rvm gem
    $ rvm-install                 # Install rvm, adds hooks for bash & zsh

  Usage:

    rvm Action [Implementation] [Options]

  Action:

    * usage   - Show this usage information
    use       - Switch to using a specific ruby version (new login shell)
    info      - Show information for current ruby
    list      - Show currently installed versions
    gemdir    - Switch to gem directory for installation (new login shell)
    srcdir    - Switch to src directory for the current ruby installation
    gemdup    - Clone source version gems to current version
                (highly expiramental) Example: rvm gemdup ~/.gem/ruby/1.8/
    install   - Install a ruby version, default is from source
    uninstall - Uninstall a ruby version
    reset     - Remove default and current settings, exit the shell.
                (If you experience odd behavior try this first)
    reload    - Reload rvm source itself (useful after changing rvm source)
    debug     - Emit environment & configuration information for *current* ruby

  Implementation:

    * ruby    - MRI/YARV Ruby (The Standard), defaults to 1.8.6
    jruby     - jRuby
    ree       - Ruby Enterprise Edition
    default   - Resets to the default system ruby
    all       - Used with install, installs all latest known versions

  Options:

    -v|--version    - Ruby Package Version, defaults to 'latest'
    -l|--level      - Patch level for the specified Ruby version
    -p|--prefix     - Package and source directory prefix, with trailing slash!
                      Default is a users home directory and /usr/local/ for root
    -c|--configure  - Options for source compile (default: --enable-shared)
    -a|--archives   - Directory to place downladed files into (~/.rvm/archives/)
    -n|--nice       - Niceness level (default: 0)
    -d|--debug      - Toggle debug mode on for extra messages (NYI)

  Resources:

    http://rvm.beginrescueend.com/notes/
    http://rvm.beginrescueend.com/examples/
    http://rvm.beginrescueend.com/todo/
    https://www.pivotaltracker.com/projects/26822

Usage

}

# Logging functions based on level
function rvm-log   { echo -e "\n $* \033[0m" ; }
function rvm-log-debug { rvm-log "\033[4;34m <d> \033[0m$*" ; }
function rvm-log-info  { rvm-log "\033[0;32m <i> \033[0m$*" ; }
function rvm-log-warn  { rvm-log "\033[0;33m <w> \033[0m$*" ; }
function rvm-log-error { rvm-log "\033[0;31m <e> \033[0m$*" ; }
function rvm-log-fail  { rvm-log "\033[0;31m <e> \033[0m$*" ; return 1 ; }

function rvm-gi { gem install -q --no-rdoc --no-ri $* ; }

function rvm-info {

  cat <<-Info

ruby:
  interpreter:  "$(ruby -v | awk '{print $1}')"
  version:      "$(ruby -v | awk '{print $2}')"
  date:         "$(ruby -v | sed 's/^.*(\([0-9]\{4\}\(-[0-9][0-9]\)\{2\}\).*$/\1/')"
  platform:     "$(ruby -v | sed 's/^.*\[//' | sed 's/\].*$//')"
  patchlevel:   "$(ruby -v | sed 's/^.*(//' | sed 's/).*$//')"
  full_version: "$(ruby -v)"

homes:
  gem:          "${GEM_HOME:-not set}"
  ruby:         "${MY_RUBY_HOME:-not set}"

binaries:
  ruby:         "$(which ruby)"
  irb:          "$(which irb)"
  gem:          "$(which gem)"

Info

}

function rvm-curl {
  pushd $rvm_archives_path > /dev/null
  eval $rvm_curl "$1"
  popd > /dev/null
}

function rvm-install-source {

  rvm_version="${1:-1.8.6}"
  # TODO: Refactor this :/
  case "$rvm_version" in
    1.9|1.9.1) rvm_major="1.9" ; rvm_minor="1" ; rvm_patch_level="${2:-243}"     ;;
    1.9.2)     rvm_major="1.9" ; rvm_minor="2" ; rvm_patch_level="${2:-review1}" ;;
    1.8|1.8.6) rvm_major="1.8" ; rvm_minor="6" ; rvm_patch_level="${2:-369}"     ;;
        1.8.7) rvm_major="1.8" ; rvm_minor="7" ; rvm_patch_level="${2:-174}"     ;;
    1.8.5)     rvm_major="1.8" ; rvm_minor="5" ; rvm_patch_level="${2:-115}"     ;;
    # TODO: simply snatch the trailing number instead of all the lines below.
    1.8.4)     rvm_major="1.8" ; rvm_minor="4" ; unset rvm_patch_level           ;;
    1.8.3)     rvm_major="1.8" ; rvm_minor="3" ; unset rvm_patch_level           ;;
    1.8.2)     rvm_major="1.8" ; rvm_minor="2" ; unset rvm_patch_level           ;;
    1.8.1)     rvm_major="1.8" ; rvm_minor="1" ; unset rvm_patch_level           ;;
    1.8.0)     rvm_major="1.8" ; rvm_minor="0" ; unset rvm_patch_level           ;;
    *) rvm-log-fail "Ruby version '$rvm_version' is unknown."
  esac

  if [ -z "$rvm_patch_level" ] ; then
    rvm_package_name="ruby-$rvm_major.$rvm_minor"
  else
    rvm_package_name="ruby-$rvm_major.$rvm_minor-p$rvm_patch_level"
  fi

  rvm_url="ftp://ftp.ruby-lang.org/pub/ruby/$rvm_major/$rvm_package_name.tar.gz"
  http://rubyforge.org/frs/download.php/33464/ruby-1.8.5-p115.tar.gz

  rvm-log-info "Installing Ruby from source to: $rvm_install_path/$rvm_package_name"
  mkdir -p $rvm_log_path/$rvm_package_name

  pushd $rvm_source_path > /dev/null
  if [ -d $rvm_source_path/$rvm_package_name ]  ; then
    cd $rvm_source_path/$rvm_package_name
  else
    if [ ! -f "$rvm_archives_path/$rvm_package_name.tar.gz" ] ; then
      rvm-log-info "\tDownloading $rvm_package_name, this may take a while depending on your connection..."
      rvm-curl $rvm_url
    fi
    rvm-log-info "\tExtracting $rvm_package_name..."
    mkdir -p $rvm_source_path/$rvm_package_name
    nice -n $niceness tar xzf $rvm_archives_path/$rvm_package_name.tar.gz -C $rvm_source_path
  fi

  cd $rvm_source_path/$rvm_package_name
  rvm-log-info "\tConfiguring $rvm_package_name using ${configure:-"--enable-shared"}, this may take a while depending on your cpu(s)..."
  nice -n $niceness ./configure --prefix=$rvm_install_path/$rvm_package_name ${configure:-"--enable-shared"} > $rvm_log_path/$rvm_package_name/configure.log 2> $rvm_log_path/$rvm_package_name/configure.error.log

  rvm-log-info "\tCompiling $rvm_package_name, this may take a while, depending on your cpu(s)..."
  nice -n $niceness make > $rvm_log_path/$rvm_package_name/make.log 2> $rvm_log_path/$rvm_package_name/make.error.log

  rvm-log-info "\tInstalling $rvm_package_name"
  nice -n $niceness make install > $rvm_log_path/$rvm_package_name/install.log 2> $rvm_log_path/$rvm_package_name/install.error.log
  chmod +x $rvm_install_path/$rvm_package_name/bin/*

  ln -fs $rvm_install_path/$rvm_package_name/bin/ruby $rvm_install_path/bin/$rvm_package_name

  rvm-log-info "\tInstalling rubygems dedicated to $rvm_package_name..."
  rvm_gem_package_name="rubygems-1.3.5"
  rvm_gem_url="http://rubyforge.org/frs/download.php/60718/$rvm_gem_package_name.tgz"
  if [ -d $rvm_source_path/$rvm_gem_package_name ]  ; then
    cd $rvm_source_path/$rvm_gem_package_name
  else
    if [ ! -f "$rvm_archives_path/$rvm_gem_package_name.tgz" ] ; then rvm-curl $rvm_gem_url ; fi
    mkdir -p $rvm_source_path/$rvm_gem_package_name
    nice -n $niceness tar zxf $rvm_archives_path/$rvm_gem_package_name.tgz -C $rvm_source_path
  fi
  # Well this is fun... fix nil error on require_paths:
  sed -i.orig "s/require_paths\.join/require_paths.to_a.join/" $rvm_source_path/$rvm_gem_package_name/lib/rubygems/gem_path_searcher.rb

  nice -n $niceness $rvm_install_path/$rvm_package_name/bin/ruby $rvm_source_path/$rvm_gem_package_name/setup.rb > $rvm_log_path/$rvm_package_name/rubygems.install.log 2> $rvm_log_path/$rvm_package_name/rubygems.install.error.log
  popd > /dev/null
  rvm-log-info "Installation of $rvm_package_name complete."

  for gem_name in rake ; do
    rvm-log-info "Installing $gem_name"
    nice -n $niceness $rvm_install_path/$rvm_package_name/bin/gem install $gem_name --no-rdoc --no-ri -q >> $rvm_log_path/$rvm_package_name/gems.install.log 2> $rvm_log_path/$rvm_package_name/gems.error.log
  done
}

function rvm-install-ruby {

  if [ -z "$RUBYOPT" ] ; then
    ruby_options=$RUBYOPT ; unset RUBYOPT
  fi

  case "$rvm_implementation" in

    ree)
      rvm_version=${rvm_version:-1.8.6}
      rvm_patch_level=${rvm_patch_level:-20090610}
      rvm_package_name="ruby-enterprise-$rvm_version-$rvm_patch_level"
      rvm_url="http://rubyforge.org/frs/download.php/58677/$rvm_package_name.tar.gz"
      rvm-log-info "Installing Ruby Enterprise Edition from source to: $rvm_install_path/$rvm_package_name"
      pushd $rvm_source_path > /dev/null
      if [ -d $rvm_source_path/$rvm_package_name ]  ; then
        cd $rvm_source_path/$rvm_package_name
      else
        if [ ! -f "$rvm_archives_path/$rvm_package_name.tar.gz" ] ; then
          rvm-log-info "\tDownloading $rvm_package_name, this may take a while depending on your connection..."
          rvm-curl $rvm_url
        fi
        rvm-log-info "\tExtracting $rvm_package_name..."
        mkdir -p $rvm_source_path/$rvm_package_name
        nice -n $niceness tar xzf $rvm_archives_path/$rvm_package_name.tar.gz -C $rvm_source_path
      fi

      rvm-log-info "\tInstalling $rvm_package_name, this may take a while, depending on your cpu(s)..."
      mkdir -p $rvm_log_path/$rvm_package_name

      cd $rvm_source_path/$rvm_package_name
      nice -n $niceness ./installer -a $rvm_install_path/ruby-enterprise-$rvm_version-$rvm_patch_level --dont-install-useful-gems > $rvm_log_path/$rvm_package_name/install.log 2> $rvm_log_path/$rvm_package_name/install.error.log
      chmod +x $rvm_install_path/$rvm_package_name/bin/*

      ln -fs $rvm_install_path/$rvm_package_name/bin/ruby $rvm_install_path/bin/$rvm_package_name

      rvm-log-info "\tInstalling rubygems dedicated to $rvm_package_name..."
      rvm_gem_package_name="rubygems-1.3.5"
      rvm_gem_url="http://rubyforge.org/frs/download.php/60718/$rvm_gem_package_name.tgz"
      if [ -d $rvm_source_path/$rvm_gem_package_name ]  ; then
        cd $rvm_source_path/$rvm_gem_package_name
      else
        if [ ! -f "$rvm_archives_path/$rvm_gem_package_name.tgz" ] ; then rvm-curl $rvm_gem_url ; fi
        mkdir -p $rvm_source_path/$rvm_gem_package_name
        nice -n $niceness tar zxf $rvm_archives_path/$rvm_gem_package_name.tgz -C $rvm_source_path
      fi
      # Well this is fun... fix nil error on require_paths:
      sed -i.orig "s/require_paths\.join/require_paths.to_a.join/" $rvm_source_path/$rvm_gem_package_name/lib/rubygems/gem_path_searcher.rb > $rvm_log_path/$rvm_package_name/rubygems.install.log 2> $rvm_log_path/$rvm_package_name/rubygems.install.error.log

      nice -n $niceness $rvm_install_path/$rvm_package_name/bin/ruby $rvm_source_path/$rvm_gem_package_name/setup.rb > $rvm_log_path/$rvm_package_name/rubygems.install.log 2> $rvm_log_path/$rvm_package_name/rubygems.install.error.log
      rvm-log-info "Installation of $rvm_package_name complete."
      popd > /dev/null

      for gem_name in rake ; do
        rvm-log-info "Installing $gem_name"
        nice -n $niceness $rvm_install_path/$rvm_package_name/bin/gem install $gem_name --no-rdoc --no-ri -q >> $rvm_log_path/$rvm_package_name/gems.install.log 2> $rvm_log_path/$rvm_package_name/gems.error.log
      done
    ;;

    jruby)
      rvm_version=${rvm_version:-1.3.1} # 1.2.0, 1.3.1
      unset rvm_patch_level # No patchlevel for jRuby
      rvm_package_file="$rvm_implementation-bin-$rvm_version"
      rvm_package_name="$rvm_implementation-$rvm_version"
      rvm_url="http://dist.codehaus.org/$rvm_implementation/$rvm_version/$rvm_package_file.zip"

      rvm-log-info "Installing jRuby to: $rvm_install_path/$rvm_package_name"
      mkdir -p $rvm_log_path/$rvm_package_name
      pushd $rvm_source_path > /dev/null
      if [ -d $rvm_package_name ]  ; then
        cd $rvm_source_path/$rvm_package_name
      else
        if [ ! -f "$rvm_archives_path/$rvm_package_file.zip" ] ; then
          rvm-log-info "\tDownloading $rvm_package_file, this may take a while depending on your connection..."
          rvm-curl $rvm_url
        fi
        rvm-log-info "\tExtracting $rvm_package_file..."
        nice -n $niceness unzip -q $rvm_archives_path/$rvm_package_file.zip -d $rvm_source_path
      fi

      rvm-log-info "\tInstalling $rvm_package_name..."
      mkdir -p $rvm_install_path/$rvm_package_name/bin/
      rsync -ag $rvm_source_path/$rvm_package_name/ $rvm_install_path/$rvm_package_name/
      cd $rvm_source_path/$rvm_package_name/tool/nailgun && make > $rvm_log_path/$rvm_package_name/install.nailgun.log 2> $rvm_log_path/$rvm_package_name/install.error.nailgun.log
      popd > /dev/null
      chmod +x $rvm_install_path/$rvm_package_name/bin/*
      for binary in jruby jgem jirb ; do
        ln -fs $rvm_install_path/$rvm_package_name/bin/$binary $rvm_install_path/$rvm_package_name/bin/${binary#j}
      done

      ln -fs $rvm_install_path/$rvm_package_name/bin/ruby $rvm_install_path/bin/$rvm_package_name

      for gem_name in rake jruby-openssl ; do
        rvm-log-info "Installing $gem_name"
        nice -n $niceness $rvm_install_path/$rvm_package_name/bin/jgem install $gem_name --no-rdoc --no-ri -q >> $rvm_log_path/$rvm_package_name/gems.install.log 2> $rvm_log_path/$rvm_package_name/gems.error.log
      done
    ;;

    ruby)
      rvm-install-source ${rvm_version:-1.8.6} ${rvm_patch_level:-$3}
    ;;

    default)
      rvm-log-fail "please specify a ruby implementation to install."
    ;;
    *) rvm-log-fail "Ruby implementation '$rvm_implementation' is not known."

  esac

  if [ ! -z "$ruby_options" ] ; then
    RUBYOPT=$ruby_options ; export RUBYOPT
  fi

}

function rvm-uninstall {

  rvm_implementation="${1:-$rvm_implementation}"
  if [ "$rvm_version" = "1.8" ] ; then rvm_version="1.8.6" ; fi
  if [ "$rvm_version" = "1.9" ] ; then rvm_version="1.9.1" ; fi
  case "$rvm_implementation" in

    jruby)
      rvm_version="${rvm_version:-1.3.1}"
      if [ "$rvm_version" = "1.2.0" -o "$rvm_version" = "1.3.1" ] ; then
        rvm_package_name="jruby*-$rvm_version"
      else
        rvm-log-fail "Unknown jRuby version: $rvm_version"
      fi
    ;;

    ree)
      rvm_version=${rvm_version:-1.8.6}
      if [ "$rvm_version" = "1.8.6" ] ; then
        rvm_package_name="ruby-enterprise-$rvm_version-${3:-20090610}"
      else
        rvm-log-fail "Unknown Ruby Enterprise Edition version: $rvm_version"
      fi
    ;;

    ruby)
      if [ "$rvm_version" = "1.8.7" ] ; then
        rvm_package_name="ruby-${rvm_version}-p${rvm_patch_level:-174}"

      elif [ "$rvm_version" = "1.8.6" ] ; then
        rvm_package_name="ruby-${rvm_version}-p${rvm_patch_level:-369}"

      elif [ "$rvm_version" = "1.9.2" ] ; then
        rvm_package_name="ruby-${rvm_version}-p${rvm_patch_level:-review1}"

      elif [ "$rvm_version" = "1.9.1" ] ; then
        rvm_package_name="ruby-${rvm_version}-p${rvm_patch_level:-243}"

      elif [ "$rvm_version" = "1.8.5" ] ; then
        rvm_package_name="ruby-${rvm_version}-p${rvm_patch_level:-115}"

      elif [ "$rvm_version" = "1.8.0" -o "$rvm_version" = "1.8.1" -o "$rvm_version" = "1.8.2" -o "$rvm_version" = "1.8.3" -o "$rvm_version" = "1.8.4" -o ] ; then
        rvm_package_name="ruby-${rvm_version}"
      else
        rvm-log-fail "Unknown ruby version: $rvm_version"
      fi
    ;;

    *)
      rvm-log-fail "Ruby implementation '$rvm_implementation' is not known."

  esac

  if [ ! -z "$rvm_package_name" ] ; then
    for path in $rvm_source_path $rvm_install_path ; do
      if [ -d $path/$rvm_package_name ] ; then
        rvm-log-info "Removing $path/$rvm_package_name..."
        rm -rf $path/$rvm_package_name
      fi
    done
  else
    rvm-log-fail "Cannot uninstall unknown package '$rvm_package_name'"
  fi

}

#function rvm-switch {
  # Determine and set:
  # rvm_implementation
  # rvm_version
  # rvm_patch_level (optional)
  # rvm_ruby_home
  # rvm_gem_home
#}

function rvm-use {

  rvm_implementation="${1:-$rvm_implementation}"
  case "$rvm_implementation" in

    default)
      rm -f $rvm_install_path/current
      unset GEM_HOME MY_RUBY_HOME
      source $rvm_install_path/default
      PATH="$default_path" ; export PATH
    ;;

    jruby)
      rvm_version="${rvm_version:-1.3.1}"
      if [ "$rvm_version" = "1.2.0" -o "$rvm_version" = "1.3.1" ] ; then
        MY_RUBY_HOME="$rvm_install_path/jruby-$rvm_version"
        GEM_HOME="$rvm_gem_path/jruby/1.8"
        alias ruby_ng="jruby --ng"
        alias ruby_ng_server="jruby --ng-server"
      else
        rvm-log-fail "Unknown jRuby version: $rvm_version"
      fi
    ;;

    ree)
      rvm_version=${rvm_version:-1.8.6}
      if [ "$rvm_version" = "1.8.6" ] ; then
        rvm_patch_level="${3:-20090610}"
        MY_RUBY_HOME="$rvm_install_path/ruby-enterprise-$rvm_version-$rvm_patch_level"
        GEM_HOME="$rvm_gem_path/ruby-enterprise/1.8"
      else
        rvm-log-fail "Unknown Ruby Enterprise Edition version: $rvm_version"
      fi
    ;;

    ruby)
      if [ "$rvm_version" = "1.8" ] ; then rvm_version="1.8.6" ; fi
      if [ "$rvm_version" = "1.9" ] ; then rvm_version="1.9.1" ; fi

      # TODO: Refactor this, simplify.
      if [ "$rvm_version" = "1.8.7" ] ; then
        rvm_patch_level="${rvm_patch_level:-174}"

      elif [ "$rvm_version" = "1.8.6" ] ; then
        rvm_patch_level="${rvm_patch_level:-369}"

      elif [ "$rvm_version" = "1.9.2" ] ; then
        rvm_patch_level="${rvm_patch_level:-review1}"

      elif [ "$rvm_version" = "1.9.1" ] ; then
        rvm_patch_level="${rvm_patch_level:-243}"

      elif [ "$rvm_version" = "1.8.5" ] ; then
        rvm_patch_level="${rvm_patch_level:-115}"

      elif [ "$rvm_version" = "1.8.0" -o "$rvm_version" = "1.8.1" -o "$rvm_version" = "1.8.2" -o "$rvm_version" = "1.8.3" -o "$rvm_version" = "1.8.4" ] ; then
        unset rvm_patch_level

      else
        rvm-log-fail "Unknown ruby version: $rvm_version"
      fi

      if [ -z "$rvm_patch_level" ] ; then
        MY_RUBY_HOME="$rvm_install_path/ruby-${rvm_version}"
      else
        MY_RUBY_HOME="$rvm_install_path/ruby-${rvm_version}-p${rvm_patch_level}"
      fi
      # TODO: rvm_gem_home
      GEM_HOME="$rvm_gem_path/$rvm_implementation/$rvm_version"
    ;;

    *)
      rvm-log-fail "Ruby implementation '$rvm_implementation' is not known."

  esac
  # TODO: Base this off of a) rvm_package_name, b) $rvm_version and c) $rvm_implementation

  # Now actually use it.
  if [ ! "$rvm_implementation" = "default" ] ; then
    # Install if not installed
    if [ ! -d $MY_RUBY_HOME ] ; then
      rvm-log-warn "$rvm_implementation $rvm_version is not installed."
      rvm-install-ruby $rvm_implementation $rvm_version $level
    fi

    # Set as 'current'
    RUBY_VERSION="$($MY_RUBY_HOME/bin/ruby -v | sed 's/^\(.*\) (.*$/\1/')"
    export GEM_HOME MY_RUBY_HOME RUBY_VERSION

    echo "PATH=$MY_RUBY_HOME/bin:$GEM_HOME/bin:$default_path ; export PATH" > $rvm_install_path/current
    for variable in RUBY_VERSION GEM_HOME MY_RUBY_HOME ; do
      eval "export $variable"
      eval value=\$${variable}
      echo "${variable}='$value' ; export ${variable}" >> $rvm_install_path/current
    done
  fi

  rvm-log-info "Switching to $rvm_implementation $rvm_version $rvm_patch_level ...\n"
  if [ ! -z "$BASH_VERSION" ] ; then
    exec bash -l
  elif [ ! -z "$ZSH_VERSION" ] ; then
    exec zsh -l
  else
    rvm-log-fail "Your shell is not supported bash and zsh are currently supported."
  fi

}

function rvm-symlinks {

  mkdir -p ${rvm_install_path}/bin
  for release in `ls $rvm_install_path | grep 'ruby-'` ; do
    for binary in ruby irb gem rdoc ri erb ; do
      if [ -x $rvm_install_path/$release/bin/$binary ] ; then
        ln -fs $rvm_install_path/$release/bin/$binary $rvm_install_path/bin/$binary-${release#ruby-}
      fi
    done
  done

}

function rvm-list {

  echo -e "\nruby:\n$(ls -l $rvm_install_path/ | awk '/ ruby-[1-2].*/ { print " - " $NF  }')\n"
  echo -e "jruby:\n$(ls -l $rvm_install_path/ | awk '/jruby-.*/ { print " - " $NF }')\n"
  echo -e "ree:\n$(ls $rvm_install_path/ | awk '/ruby-enterprise-.*/ { print " - " $NF }')\n"
  echo -e "system:\n - ($($default_system_ruby -v))\n"

}

function rvm-reset {

  PATH="$default_path" ; export PATH
  for variable in RUBY_VERSION GEM_HOME MY_RUBY_HOME ; do
    unset $variable
  done
  rm -f $rvm_install_path/default* $rvm_install_path/current
  if [ ! -z "$BASH_VERSION" ] ; then
    exec bash -l
  elif [ ! -z "$ZSH_VERSION" ] ; then
    exec zsh -l
  else
    rvm-log-fail "Your shell is not supported bash and zsh are currently supported."
  fi

}

function rvm-gem-dir {

  rvm_implementation=${1:-$rvm_implementation}
  if [ -z "$rvm_implementation" ] ; then rvm_implementation="current" ; fi
  if [ "$rvm_implementation" = "current" -o "$rvm_implementation" = "default" ] ; then
    if [ ! -z "$rvm_version" ] ; then rvm_implementation="ruby" ; fi
  fi

  case "$rvm_implementation" in
    jruby)
      rvm_version="${rvm_version:-1.3.1}"
      GEM_HOME="$rvm_gem_path/jruby/${rvm_version}"
    ;;
    ree)
      rvm_version="${rvm_version:-1.8.6}"
      GEM_HOME="$rvm_gem_path/ruby-enterprise/${rvm_version}"
    ;;
    ruby)
      if [ "$rvm_version" = "1.8" ] ; then rvm_version="1.8.6" ; fi
      if [ "$rvm_version" = "1.9" ] ; then rvm_version="1.9.1" ; fi

      rvm_version="${2:-$rvm_version}"

      if [ -d "$rvm_gem_path/$rvm_implementation/$rvm_version" ] ; then
        GEM_HOME="$rvm_gem_path/$rvm_implementation/$rvm_version"
      else
        rvm-log-fail "Unknown version 1.8.6 or not in stalled: $rvm_version"
      fi
    ;;
    current)
      GEM_HOME=$($default_system_ruby -r rubygems -e "puts Gem::default_path.compact.first")
    ;;
    system)
      GEM_HOME=$default_system_gem_path
    ;;
    user)
      GEM_HOME=$default_user_gem_path
    ;;
    *)
      rvm-log-fail "Ruby implementation '$rvm_implementation' is not known."
  esac

  if [ -d $GEM_HOME ] ; then
    echo $GEM_HOME && cd $GEM_HOME
  else
    rvm-log-fail "$rvm_implementation $rvm_version GEM directory does not exist."
  fi

}

function rvm-src-dir {
  case "${1:-$rvm_implementation}" in
    jruby)
      rvm_version=${rvm_version:-1.3.1}
      if [ "${2:-$rvm_version}" = "1.2.0" -o "${2:-$rvm_version}" = "1.3.1" ] ; then
        rvm_ruby_source_dir="$rvm_source_path/$rvm_implementation-$rvm_version"
      else
        rvm-log-fail "Unknown jRuby version: $rvm_version"
      fi
    ;;

    ree)
      rvm_version=${rvm_version:-1.8.6}
      if [ "${2:-$rvm_version}" = "1.8.6" -o "${2:-$rvm_version}" = "1.8" ] ; then
        rvm_ruby_source_dir="$rvm_source_path/ruby-enterprise-${2:-$rvm_version}-"${3:-20090610}""
      else
        rvm-log-fail "Unknown Ruby Enterprise Edition version: ${2:-$rvm_version}"
      fi
    ;;

    ruby)
      if [ "$rvm_version" = "1.8" ] ; then rvm_version="1.8.6" ; fi
      if [ "$rvm_version" = "1.9" ] ; then rvm_version="1.9.1" ; fi

      rvm_version="${2:-$rvm_version}"

      if [ "$rvm_version" = "1.8.7" ] ; then
        rvm_patch_level="${rvm_patch_level:-174}"

      elif [ "$rvm_version" = "1.8.6" ] ; then
        rvm_patch_level="${rvm_patch_level:-369}"

      elif [ "$rvm_version" = "1.9.2" ] ; then
        rvm_patch_level="${rvm_patch_level:-review1}"

      elif [ "${rvm_version}" = "1.91" ] ; then
        rvm_patch_level="${rvm_patch_level:-243}"

      elif [ "$rvm_version" = "1.8.5" ] ; then
        rvm_patch_level="${rvm_patch_level:-369}"

      elif [ "$rvm_version" = "1.8.0" -o "$rvm_version" = "1.8.1" -o "$rvm_version" = "1.8.2" -o "$rvm_version" = "1.8.3" -o "$rvm_version" = "1.8.4" ] ; then
        unset rvm_patch_level

      else
        rvm-log-fail "unknown Ruby version: ${2:-$rvm_version}"
      fi
      if [ -z "$rvm_patch_level" ] ; then
        rvm_ruby_source_dir="$rvm_implementation-${rvm_version}"
      else
        rvm_ruby_source_dir="$rvm_source_path/$rvm_implementation-$rvm_version-p$rvm_patch_level"
      fi
    ;;

    default)
      rvm-log-warn "Invalid request, rvm cannot change to the default source directory."
    ;;

    *)
      rvm-log-fail "Ruby implementation '$rvm_implementation' is not known."
      return 1
  esac

  if [ -d $rvm_ruby_source_dir ] ; then
    cd $rvm_ruby_source_dir
  else
    rvm-log-fail "$rvm_implementation $rvm_version source directory does not exist."
  fi

}

# clones from source implementation/version to current
function rvm-gem-dup {

  if [ "$1" = "default" ] ; then
    rvm_source_gem_dir="$default_user_gem_path"
  elif [ "$1" = "system" ] ; then
    rvm_source_gem_dir="$default_system_gem_path"
  else
    rvm_source_gem_dir=${1:-$default_user_gem_path} # TODO: check for and remove trailing /gems
  fi

  if [ ! -z "$rvm_source_gem_dir" ] ; then
    for rvm_gem_name_version in `ls $rvm_source_gem_dir/gems` ; do
      rvm_gem_name=${rvm_gem_name_version%-*}
      rvm_gem_version=${rvm_gem_name_version##*-}
      if [ -d $GEM_HOME/gems/$rvm_gem_name_version ] ; then
        echo "$rvm_gem_name_version already installed."
      else
        rvm-gi $rvm_source_gem_dir/cache/$rvm_gem_name-$rvm_gem_version.gem
      fi
    done
    unset rvm_gem_name_version rvm_gem_name rvm_gem_version
  else
    rvm-log-fail "Unknown $rvm_implementation version: $rvm_version"
  fi

}

function rvm-version { echo "rvm $rvm_meta_version ($rvm_meta_updated) [$rvm_meta_website]" ; }

function rvm {

  # Cleanup, aisle 3
  for variable in rvm_action rvm_implementation rvm_patch_level rvm_version rvm_source_path rvm_install_path rvm_debug rvm_prefix_path rvm_package_name rvm_gem_path ; do
    eval "unset $variable"
  done ; unset variable

  # NOW load defaults settings. TODO: root user loads /etc/rvmrc
  if [ -f ~/.rvmrc ] ; then source ~/.rvmrc ; fi

  while [ $# -gt 0 ] ; do
    rvm_token="$1" ; shift
    case "$rvm_token" in
      install|uninstall|use|path|info|setup|version|srcdir|list|symlinks|reset|debug|reload)
        rvm_action=$rvm_token
      ;;

      ruby|jruby|ree|default|all)
        rvm_implementation="$rvm_token"
        rvm_action="${rvm_action:-use}"
      ;;

      gemdir)
        rvm_action=$rvm_token

        if [ "$1" = "system" ] ; then
          rvm_implementation="system" ; shift
        fi

        if [ "$1" = "user" ] ; then
          rvm_implementation="user"  ; shift
        fi

        rvm_implementation="${rvm_implementation:-current}"
      ;;

      gemdup)
        rvm_action=$rvm_token
        if [ -z "$1" ] ; then
          rvm_implementation="default"
        elif [ "$1" = "system" ] ; then
          rvm_implementation=$1 ; shift
        elif [ "$1" = "default" ] ; then
          rvm_implementation=$1 ; shift
        else
          rvm_implementation=$1 ; shift
          rvm_version=$2 ; shift
        fi
      ;;

      1.8|1.8.0|1.8.1|1.8.2|1.8.3|1.8.4|1.8.5|1.8.6|1.8.7|1.9|1.9.1|1.9.2|1.2.0|1.3.1)
                       rvm_version="$rvm_token"
                       rvm_action="${rvm_action:-use}"
      ;;

      -v|--version)
                       if [ -z "$1" ] ; then
                         rvm_action="version"
                       else
                         rvm_version="$1"
                       fi
                       shift
      ;;

      -l|--level)      rvm_patch_level="$1"   ; shift ;;
      -p|--prefix)     rvm_prefix_path="$1"   ; shift ;;
      -b|--bin)        rvm_bin_path="$1"      ; shift ;; # Undocumented / untested "feature"
      -s|--source)     rvm_source_path="$1"   ; shift ;; # Undocumented / untested "feature"
      -a|--archive)    rvm_archives_path="$1" ; shift ;;
      -g|--gems)       rvm_gem_path="$1"      ; shift ;;
      -c|--configure)  configure="$1"         ; shift ;;
      -n|--nice)       niceness="$1"          ; shift ;;
      -d|--debug)      rvm_debug=1                    ;;
      *)
      rvm-log-error "Unrecognized command line argument(s): '$rvm_token $*'"
      rvm-usage ; return 1
    esac
  done

  if [ "$rvm_debug" = "1" ] ; then set -x ; fi

  rvm_curl=`which curl`
  if [ $? -ne 0 ] ; then
    rvm-log-fail "rvm expects that curl is available, which curl shows no curl :("
  else
    rvm_curl="$rvm_curl -O -L -s"
  fi

  if [ -z "$rvm_implementation" -a -z "$rvm_version" ] ; then
    rvm_implementation="default"
  else
    rvm_implementation=${rvm_implementation:-ruby}
  fi

  niceness=${niceness:-0}

  # TODO: Sanitize user input, ensure that there is a / a the end...
  if [ "`whoami`" = "root" ] ; then
    rvm-log-fail "root user support is not yet implemented."
    #rvm_prefix_path=${rvm_prefix_path:-/usr/local/}
  else
    rvm_prefix_path=${rvm_prefix_path:-"$HOME/."}
  fi
  if [ "${rvm_prefix_path#${rvm_prefix_path%?}}" = '.' -o "${rvm_prefix_path#${rvm_prefix_path%?}}" = '/' ] ; then
    rvm_install_path="${rvm_prefix_path}rvm"
  else
    rvm_install_path="${rvm_prefix_path}/rvm"
  fi
  rvm_archives_path="${rvm_archives_path:-"${rvm_install_path}/archives"}"
  rvm_source_path="${rvm_source_path:-"${rvm_install_path}/src"}"
  rvm_log_path=${rvm_log_path:-"${rvm_install_path}/log"}
  rvm_bin_path=${rvm_bin_path:-"${rvm_install_path}/bin"}
  rvm_gem_path=${rvm_gem_path:-$HOME/.gem}

  PATH=$rvm_bin_path:$PATH ; export PATH

  mkdir -p $rvm_source_path $rvm_install_path/bin $rvm_archives_path

  if [ ! -f $rvm_install_path/default ] ; then
    for variable in RUBY_VERSION GEM_HOME MY_RUBY_HOME PATH ; do
      eval "export $variable"
      eval value=\$${variable}
      echo "${variable}='$value' ; export ${variable}" >> $rvm_install_path/default
    done
  fi

  if [ -s $rvm_install_path/default_path ] ; then
    default_path=`cat $rvm_install_path/default_path`
  else
    echo $PATH > $rvm_install_path/default_path
    default_path=$PATH
  fi

  if [ -s $rvm_install_path/default_user_gem_path ] ; then
    default_user_gem_path=`cat $rvm_install_path/default_user_gem_path`
  else
    ruby -r rubygems -e "puts Gem::default_path.compact.first" > $rvm_install_path/default_user_gem_path
  fi

  if [ -s $rvm_install_path/default_system_gem_path ] ; then
    default_system_gem_path=`cat $rvm_install_path/default_system_gem_path`
  else
    ruby -r rubygems -e "puts Gem::default_path.compact[1] || Gem::default_path.compact.first" > $rvm_install_path/default_system_gem_path
  fi

  if [ -s $rvm_install_path/default_system_ruby ] ; then
    default_system_ruby=`cat $rvm_install_path/default_system_ruby`
  else
   default_system_ruby=`which ruby`
   echo $default_system_ruby > $rvm_install_path/default_system_ruby
  fi

  case "$rvm_action" in
    install)
      if [ "$rvm_implementation" = "all" ] ; then
        for rvm_implementation in ruby jruby ree ; do
          if [ "$rvm_implementation" = "ruby" ] ; then
            for rvm_version in 1.8.6 1.8.7 1.9.1 1.9.2 ; do
              rvm-install-ruby $rvm_implementation $rvm_version
            done
            unset rvm_version
          else
            rvm-install-ruby $rvm_implementation $rvm_version
          fi
        done
      else
        rvm-install-ruby $rvm_implementation $rvm_version $rvm_patch_level
      fi
    ;;
    uninstall) rvm-uninstall $rvm_implementation $rvm_version $rvm_patch_level ;;
    use)       rvm-use       $rvm_implementation $rvm_version $rvm_patch_level ;;
    list)      rvm-list                                                        ;;
    gemdir)    rvm-gem-dir   $rvm_implementation $rvm_version $rvm_patch_level ;;
    srcdir)    rvm-src-dir   $rvm_implementation $rvm_version $rvm_patch_level ;;
    gemdup)    rvm-gem-dup   $rvm_implementation $rvm_version $rvm_patch_level ;;
    info)      rvm-info      $rvm_implementation $rvm_version $rvm_patch_level ;;
    symlinks)  rvm-symlinks                                                    ;;
    version)   rvm-version                                                     ;;
    reset)     rvm-reset                                                       ;;
               # TODO: how can we use bin_path here for reload, default file?
    reload)    source ~/.rvm/bin/rvm                                           ;;
    debug)
               rvm-version
               rvm-info
               rvm-log-info "PATH:$(echo $PATH | awk -F":" '{print $1":"$2":"$3":"$4":"$5}')"
               for file in .bash_profile .zshrc ; do
                 if [ -s $file ] ; then
                   rvm-log-info "~/$file: \n$(cat ~/$file| tail -n 5)\n"
                 fi
               done
               rvm-log-info "$rvm_install_path/current: \n$(cat $rvm_install_path/current)\n"
               return 0
    ;;
    *)
               if [ ! -z "$rvm_action" ] ; then
                 rvm-log-fail  "unknown action '$rvm_action'"
               else
                 rvm-usage
               fi
               return 1
  esac

  if [ "$rvm_debug" = "1" ] ; then set +x ; unset rvm_debug ; fi

}

# TODO: Make this optional:
if [ -f ~/.rvm/current ] ; then source ~/.rvm/current ; fi # magic :)

