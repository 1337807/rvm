#!/bin/bash

function __rvm_parse-args {
  while [ $# -gt 0 ] ; do
    rvm_token="$1" ; shift
    case "$rvm_token" in
      install|uninstall|path|info|setup|version|srcdir|list|symlinks|reset|debug|reload|usage|help|implode|update)
        rvm_action=$rvm_token
      ;;

      use)
        rvm_action=$rvm_token
        if [ "$1" = "default" ] ; then
          rvm_ruby_interpreter="system" ; shift
        elif [ -z "$1" ] ; then
          rvm_ruby_interpreter="system"
        fi
      ;;

      ruby|jruby|ree|macruby|rbx|rubinius|default|all)
        rvm_ruby_interpreter="$rvm_token"
        rvm_action="${rvm_action:-use}"
      ;;

      gemdir)
        rvm_action=$rvm_token

        if [ "$1" = "system" ] ; then
          rvm_ruby_interpreter="system" ; shift
        fi

        if [ "$1" = "user" ] ; then
          rvm_ruby_interpreter="user"  ; shift
        fi

        rvm_ruby_interpreter="${rvm_ruby_interpreter:-current}"
      ;;

      gemdup)
        rvm_action=$rvm_token
        if [ -z "$1" ] ; then
          rvm_ruby_interpreter="default"
        elif [ "$1" = "system" ] ; then
          rvm_ruby_interpreter=$1 ; shift
        elif [ "$1" = "default" ] ; then
          rvm_ruby_interpreter=$1 ; shift
        else
          rvm_ruby_interpreter=$1 ; shift
          rvm_ruby_version=$2 ; shift
        fi
      ;;

      do|rubydo|rakedo|gemdo)
        rvm_action=$rvm_token
        if [ "$rvm_action" = "do" ] ; then rvm_action="do" ; fi
        temp=$(echo $1 | awk '{print substr($1, 0, 1)}')
        if [ "$temp" = "-" ] ; then
          unset rvm_ruby_version
        else
          if [ ! -z "$(echo $temp | grep '[0-9]')" ] ; then
            rvm_ruby_version=$(echo "$1" | tr ',' ' ') ; shift
            unset rvm_ruby_interpreter
          else
            if [ "$1" = "jruby" -o "$1" = "rbx" -o "$1" = "rubinius" -o "$1" = "macruby" ] ; then
              rvm_ruby_interpreter=$1 ; shift
            else
              unset rvm_ruby_interpreter rvm_ruby_version
            fi
          fi
        fi
      ;;

      1.8|1.8.0|1.8.1|1.8.2|1.8.3|1.8.4|1.8.5|1.8.6|1.8.7|1.9|1.9.1|1.9.2)
                         rvm_ruby_interpreter="ruby"
                         rvm_ruby_version="$rvm_token"
                         rvm_action="${rvm_action:-use}"
      ;;

      1.2.0|1.3.1)
                         rvm_ruby_interpreter="jruby"
                         rvm_ruby_version="$rvm_token"
                         rvm_action="${rvm_action:-use}"
      ;;

      -v|--version)
                         if [ -z "$1" ] ; then
                           rvm_action="version"
                         else
                           rvm_ruby_version="$1"
                         fi
                         shift
      ;;

      -t|--tag)          rvm_ruby_tag="$1";
                         rvm_action="${rvm_action:-use}"
                         shift                             ;;
      --rev|--revision)  rvm_ruby_rev="$1";
                         rvm_action="${rvm_action:-use}"
                         shift                             ;;
      -b|--branch)       rvm_ruby_rev="$1";
                         rvm_action="${rvm_action:-use}"
                         shift                             ;;


      -P|--prefix)       rvm_prefix_path="$1"      ; shift ;;

      --rubygems)        rvm_rubygems_flag=1               ;;
      --rvm|--gem)       rvm_update_flag=1                 ;;
      --bin)
        if [ "$rvm_action" = "update" ] ; then
          rvm_bin_flag=1
        else
          rvm_bin_path="$1" ; shift
        fi
        ;;

       --source)         rvm_source_path="$1"      ; shift ;;
       --archive)        rvm_archives_path="$1"    ; shift ;;
      -G|--gems)         rvm_gem_path="$1"         ; shift ;;
      -C|--configure)
        if [ ! -z "$1" ] ; then
          rvm_ruby_configure="$(echo $1 | tr ',' ' ')"
          shift
        else
          rvm_action="error"
          rvm_error_message="--configure *must* be followed by configure flags."
        fi
      ;;

      --re-configure)    rvm_re_configure=1                ;;
      --make)            rvm_ruby_make="$1"        ; shift ;;
      --make-install)    rvm_ruby_make_install="$1"; shift ;;
      -j)
        if [ ! -z "$1" ] ; then
          rvm_make_flags="$rvm_make_flags -j$1"
          shift
        else
          rvm_action="error"
          rvm_error_message="-j *must* be followed by an integer (normally the # of CPU's in your machine)."
        fi
      ;;
      --nice)            rvm_niceness="$1"         ; shift ;;
      -l|--level)        rvm_ruby_patch_level="$1" ; shift ;;
         --summary)      rvm_summary=1                     ;;
      -r|--require)
        if [ -z "$1" ] ; then
          rvm_action="error"
          rvm_error_message="-r|--require *must* be followed by a library name."
        else
          rvm_ruby_require="$rvm_ruby_require -r$1"
          shift
        fi
      ;;
      -I|--include)
        if [ -z "$1" ] ; then
          rvm_action="error"
          rvm_error_message="-I|--include *must* be followed by a path."
        else
          rvm_ruby_load_path="$rvm_ruby_load_path:$1"
          shift
        fi
      ;;
      -f|--file)
                         rvm_action="rubydo"
                         rvm_ruby_args="$1"
                         shift
      ;;
      -S|--script|-e|--execute)
                         rvm_action="rubydo"
                         rvm_ruby_args="$@"
                         rvm_parse_break=1
      ;;

      -h|--help)         rvm_action=help           ; shift ;;
      -d|--default)      rvm_set_default=1                 ;;
      --head)            rvm_ruby_rev="head"               ;;
      --trace|--debug)   rvm_debug=1                       ;;
      --force)           rvm_force=1                       ;;
         --all)          rvm_all=1                         ;;
      -m|--gem-set)      rvm_gem_set_name="$1"     ; shift ;;
         --rm-gem-set)   rvm_gem_set_name_rm="$1"  ; shift ;;
         --dump)         rvm_dump=1                        ;;
         --load)
                         rvm_load=1
                         if [ ! -z "$1" ] ; then
                           rvm_load_file="$1"
                           shift
                         else
                            rvm_action="error"
                            rvm_error_message="--load must be followed by the .gemset file to load."
                            break;
                         fi
                         shift
      ;;

      --jit)            rvm_rubinius_jit="RBX_LLVM=1"     ;;
      --latest)         rvm_latest=1                      ;;
      --tests|--specs)  rvm_action="tests"                ;;

      default|system)
        rvm_action="use"
        rvm_ruby_interpreter="system"
      ;;

      reboot|flush|asdf|damnit|wtf|argh|work|workdamnit|BOOM|boom|wth)
        $rvm_action="reboot"
      ;;

      *)
        if [ ! -z "$rvm_token" ] ; then
          echo "$rvm_token" | grep ',' > /dev/null
          if [ $? -eq 0 ] ; then
            rvm_ruby_version="$rvm_token"
            if [ -z "$rvm_action" ] ; then
              rvm_action="rubydo" # Not sure if we really want to do this but we'll try it out.
            fi
          else
            echo $rvm_token | grep '\.rb$' > /dev/null
            if [ $? -eq 0 ] ; then # we have a specified ruby script
              rvm_ruby_args=$rvm_token
              if [ -z "$rvm_action" ] ; then
                rvm_action="rubydo" # Not sure if we really want to do this but we'll try it out.
              fi
            else
              rvm_action="error"
              rvm_error_message="Unrecognized command line argument: '$rvm_token'"
            fi
          fi
        else
          rvm_action="error"
          rvm_error_message="Unrecognized command line argument(s): '$rvm_token $@'"
        fi
        if [ "$rvm_action" = "error" ] ; then
          break;
        fi

    esac
    if [ ! -z "$rvm_parse_break" -o ! -z "$rvm_error_message" ] ; then unset rvm_parse_break; break; fi
  done

  if [ ! -z "$rvm_error_message" ] ; then popd 2> /dev/null ; return 1 ; fi
  if [ -z "$rvm_debug" ] ; then set +x ; else set -x ; fi

}

function rvm {

  __rvm_cleanup-variables
  __rvm_load-rvmrc
  __rvm_initialize
  __rvm_load-defaults
  __rvm_parse-args $@

  status=0
  case "$rvm_action" in
    install)   __rvm_install-ruby ;status=$? ;;
    uninstall) __rvm_uninstall    ;status=$? ;;
    use)       __rvm_use          ;status=$? ;;
    gemdir)    __rvm_gem-dir      ;status=$? ;;
    srcdir)    __rvm_src-dir      ;status=$? ;;
    gemdup)    __rvm_gem-dup      ;status=$? ;;
    list)      __rvm_list         ;status=$? ;;
    symlinks)  __rvm_symlinks     ;status=$? ;;
    version)   __rvm_version      ;status=$? ;;
    tests|specs)
      rvm_do_summary=1
      rvm_action="rake"
      __rvm_do
    ;;
    rubydo|rakedo|gemdo) __rvm_do ; status=$? ;;
    reset)     __rvm_reset        ;;
               # TODO: how can we use bin_path here for reload, default file?
    reload)    __rvm_reload       ;;
    implode)   __rvm_implode      ;;
    update)    __rvm_update       ;;
    info|debug)
                __rvm_version
                __rvm_info
                if [ "$rvm_action" = "debug" ] ; then __rvm_debug ; fi
                return 0
    ;;
    reboot)     __rvm_reboot ;;
    usage|help) __rvm_usage  ;;
    error)      __rvm_log "fail" "$rvm_error_message ( see: 'rvm usage' )" ; popd 2> /dev/null ; return 1; ;;
    *)
      if [ ! -z "$rvm_action" ] ; then
        __rvm_log "fail"  "unknown action '$rvm_action'"
      else
        __rvm_usage
      fi
      return 1
  esac

  if [ "$rvm_debug" = "1" ] ; then set +x ; unset rvm_debug ; fi
  return $status
}

