#!/usr/bin/env bash

__rvm_setup_compile_environment()
{
  typeset __type
  typeset -a __types
  __types=(
    osx_gcc osx_brew_libs architectures gcc47 smartos sunos openbsd shared_static
  )
  for __type in "${__types[@]}"
  do
    rvm_debug "__rvm_setup_compile_environment_${__type} $1"
    __rvm_setup_compile_environment_${__type} "$1" || return $?
  done
  rvm_debug "found compiler: $( __rvm_found_compiler )"
}

__rvm_setup_compile_environment_osx_gcc()
{
  __rvm_selected_compiler > /dev/null || __rvm_find_osx_gcc42

  if __rvm_array_contains "*debug*" "${rvm_patch_names[@]}"
  then rvm_force_autoconf_flag=1
  fi
}

__rvm_setup_compile_environment_architectures_default()
{
  typeset _architecture _architectures_string
  typeset -a _architectures _flags

  _architectures=()
  for _architecture in ${rvm_architectures//,/ }
  do _architectures+=( -arch "${_architecture}" )
  done
  _architectures_string="${_architectures[*]}"

  _flags=(
    CFLAGS="${_architectures_string}"
    CCFLAGS="${_architectures_string}"
    CXXFLAGS="${_architectures_string}"
    LDFLAGS="${_architectures_string}"
  )
  __rvm_update_configure_env "${_flags[@]}"
  rvm_configure_flags+=( --disable-dependency-tracking )
}

__rvm_setup_compile_environment_architectures_ruby_osx()
{
  typeset _architecture _architectures_string
  typeset -a _architectures _flags

  _architectures=()
  for _architecture in ${rvm_architectures//,/ }
  do _architectures+=( -arch "${_architecture}" )
  done
  _architectures_string="${_architectures[*]}"

  _flags=(
    MACOSX_DEPLOYMENT_TARGET="$( sw_vers -productVersion | awk -F'.' '{print $1"."$2}' )"
    CFLAGS="${_architectures_string} -g -Os -pipe -no-cpp-precomp"
    CCFLAGS="${_architectures_string} -g -Os -pipe"
    CXXFLAGS="${_architectures_string} -g -Os -pipe"
    LDFLAGS="${_architectures_string} -bind_at_load"
    LDSHARED="cc ${_architectures_string} -dynamiclib -undefined suppress -flat_namespace"
  )
  __rvm_update_configure_env "${_flags[@]}"
  __rvm_array_contains "*osx-arch-fix*" "${rvm_patch_names[@]}" || rvm_patch_names+=( osx-arch-fix )
}

__rvm_setup_compile_environment_architectures()
{
  [[ -n "${rvm_architectures:-}" ]] || return 0
  case "$1" in
    ruby-1.9*|ruby-2*|ruby-head*)
      # Ruby 1.9+ supports the easy way
      rvm_configure_flags+=( --with-arch="${rvm_architectures}" )
      ;;
    ruby*|ree*)
      case "$(uname)" in
        (Darwin)
          __rvm_setup_compile_environment_architectures_ruby_osx
          ;;
        (*)
          __rvm_setup_compile_environment_architectures_default
          ;;
      esac
      ;;
    *)
      __rvm_setup_compile_environment_architectures_default
      ;;
  esac
}

__rvm_setup_compile_environment_gcc47()
{
  __rvm_compiler_is_gcc47 || return 0
  __rvm_string_match "$1" "ruby-1.8.*" "ree*" || return 0

  # -g -O2 from 1.8.7-p370 is not enough, need all the flags to fix it
  __rvm_update_configure_env CFLAGS="-O2 -fno-tree-dce -fno-optimize-sibling-calls"
}

__rvm_setup_compile_environment_smartos()
{
  [[ "$(uname -v)" =~ ^joyent ]] || return 0
  __rvm_update_configure_opt_dir "$1" "/opt/local" # TODO do we needed the next line?
  __rvm_update_configure_env CCFLAGS="-I/opt/local/include"
  __rvm_add_to_path prepend "/opt/local/gnu/bin"
}

__rvm_setup_compile_environment_sunos()
{
  [[ "$(uname -s)" == "SunOS" ]] || return 0
  case "$1" in
    ruby-1.9*|ruby-2*)
      # Temporary solution for this bug http://bugs.ruby-lang.org/issues/5384
      rvm_configure_flags+=( ac_cv_func_dl_iterate_phdr=no )
      ;;
  esac
}


__rvm_setup_compile_environment_openbsd()
{
  [[ "$(uname)" == "OpenBSD"     ]] || return 0
  if
    [[  -z "${AUTOCONF_VERSION:-}" ]]
  then
    export AUTOCONF_VERSION
    AUTOCONF_VERSION="$( ls -1 /usr/local/bin/autoreconf-* | sort | tail -n 1 )"
    AUTOCONF_VERSION="${AUTOCONF_VERSION##*-}"
  fi
  if
    [[  -z "${AUTOMAKE_VERSION:-}" ]]
  then
    export AUTOMAKE_VERSION
    AUTOMAKE_VERSION="$( ls -1 /usr/local/bin/automake-* | sort | tail -n 1 )"
    AUTOMAKE_VERSION="${AUTOMAKE_VERSION##*-}"
  fi
}

__rvm_setup_compile_environment_shared_static()
{
  # skip it if something already set
  case "${rvm_configure_flags[*]}" in
    (*--enable-shared*|*--disable-shared*|*--enable-static*|*--disable-static*) return 0 ;;
  esac
  case "$(uname)" in
    (Darwin)
      # OSX does not have a default package manager, shared is not wanted feature.
      case "$1" in
        (openssl*)
          rvm_configure_flags+=( no-shared )
          ;;
        (*)
          rvm_configure_flags+=( --disable-shared )
          ;;
      esac
      ;;
    (*)
      case "$1" in
        (openssl*)
          rvm_configure_flags+=( shared )
          ;;
        (readline*)
          rvm_configure_flags+=( --disable-static --enable-shared )
          ;;
        (*)
          rvm_configure_flags+=( --enable-shared )
          ;;
      esac
      ;;
  esac
}

__rvm_setup_compile_environment_osx_brew_lib_install()
{
  typeset brew_lib
  brew_lib="$1"
  brew ls -1 | grep "^${brew_lib}$" >/dev/null ||
  case "$rvm_autolibs_flag" in
    (0|1)
      rvm_debug "Could not find ${brew_lib} in Homebrew"
      return 1 # just ignore
      ;;
    (2)
      rvm_warn "Could not find ${brew_lib} in Homebrew"
      return 2
      ;;
    (*) # 3+
      __rvm_log_command brew_install_${brew_lib} "Installing ${brew_lib} with HomeBrew" \
        brew install ${brew_lib} ||
        return 3
      ;;
  esac
}

__rvm_setup_compile_environment_osx_brew_lib()
{
  typeset brew_lib brew_lib_prefix
  brew_lib="$2"

  __rvm_setup_compile_environment_osx_brew_lib_install "${brew_lib}" || return 0

  if
    brew_lib_prefix="$( brew --prefix "${brew_lib}" 2>/dev/null )" &&
    [[ -n "${brew_lib_prefix}" && -d "${brew_lib_prefix}" ]]
  then
    __rvm_update_configure_opt_dir "$1" "${brew_lib_prefix}"
  fi
}

__rvm_setup_compile_environment_osx_brew_libs_install_brew()
{
  typeset homebrew_home
  if (( UID == 0 ))
  then homebrew_home="/usr/local"
  else homebrew_home="$HOME/.homebrew"
  fi
  mkdir -p "${homebrew_home}" || return $?
  set -o pipefail
  curl -fkL https://github.com/mxcl/homebrew/tarball/master |
  tar xz --strip 1 -C "${homebrew_home}" ||
    return $?
  chmod +x "${homebrew_home}/bin/brew" # just in case
  ln -nfs "${homebrew_home}/bin/brew" "${rvm_bin_path:-$rvm_path/bin}/brew"
}

__rvm_setup_compile_environment_osx_brew_libs_ensure_brew()
{
  which brew >/dev/null ||
  {
    case "${rvm_autolibs_flag}" in
      (0|1)
        rvm_debug "homebrew is not available - skipping."
        return 1 # just ignore
        ;;
      (2|3)
        rvm_warn "Requested installation with homebrew libs, but homebrew is not available - skipping."
        return 2
        ;;
      (*) # 4+
        __rvm_log_command brew_install "Installing homebrew" \
          __rvm_setup_compile_environment_osx_brew_libs_install_brew ||
          return $?
        ;;
    esac
  }
}

#
# rvm_autolibs_flag
# - 0 - disabled
# - 1 - auto detect
# - 2 - enabled
# - 3 - 2 + install libs if not available
# - 4 - 3 + install package manager if not available (default)
#
__rvm_setup_compile_environment_osx_brew_libs()
{
  [[ "$(uname)" == "Darwin" ]] || return 0
  (( ${rvm_autolibs_flag:=4} > 0 )) || return 0
  __rvm_setup_compile_environment_osx_brew_libs_ensure_brew || return $?

  typeset -a brew_libs
  typeset ruby_lib brew_lib
  brew_libs=(
    autoconf automake apple-gcc42 libtool pkg-config
  )
  for brew_lib in  "${brew_libs[@]}"
  do __rvm_setup_compile_environment_osx_brew_lib_install "${brew_lib}" || true
  done

  case "$1" in
    ruby*|ree*)
      brew_libs=(
        libyaml readline libxml2 libxslt libksba openssl curl-ca-bundle sqlite
      )
      for brew_lib in "${brew_libs[@]}"
      do __rvm_setup_compile_environment_osx_brew_lib "$1" "${brew_lib}" "${ruby_lib}"
      done
      ;;
  esac
}
