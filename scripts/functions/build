#!/usr/bin/env bash

__rvm_setup_compile_environment()
{
  if [[ "$OSTYPE" == darwin* ]]
  then
    export CC
    local oldCC
    oldCC="${CC:-}"
    if [[ -x /usr/bin/gcc-4.2 ]]
    then
      true CC: ${CC:=/usr/bin/gcc-4.2}

    elif which gcc-4.2 > /dev/null
    then
      true CC: ${CC:=gcc-4.2}

    fi

    if [[ -z "${CC:-}" ]]
    then
      true # sok?

    elif $CC --version | grep LLVM >/dev/null
    then
      if [[ "${CC:-}" == "$oldCC" ]]
      then
        rvm_error "The provided CC(${CC:-}) is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`."
      else
        rvm_error "The autodetected CC(${CC:-}) is LLVM based, it is not yet fully supported by ruby and gems, please read \`rvm requirements\`, and set CC=/path/to/gcc ."
      fi
      exit 1
    fi

  fi

  if [[ "Darwin" == "$(uname)" ]]
  then
    rvm_configure_env=()
    local architectures="${rvm_architectures:-"x86_64"}"
    architectures="${architectures:+-arch }${architectures:-}"
    rvm_configure_env+=(
    "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion |
    awk -F'.' '{print $1"."$2}')"
    )
    rvm_configure_env+=("CFLAGS='$architectures -g -Os -pipe -no-cpp-precomp'")
    rvm_configure_env+=("CCFLAGS='$architectures -g -Os -pipe'")
    rvm_configure_env+=("CXXFLAGS='$architectures -g -Os -pipe'")
    rvm_configure_env+=("LDFLAGS='$architectures -bind_at_load'")
    rvm_configure_env+=(
    "LDSHARED='cc $architectures -dynamiclib -undefined suppress -flat_namespace'"
    )
  fi
  rvm_configure_env="${rvm_configure_env[*]}"
  export rvm_configure_env
}

# Attempt to override the Darwin build settings for rubies
__rvm_make_flags()
{
  # This is only an issue with Darwin :/
  if [[ "$MACHTYPE" == *darwin*  && -n "${rvm_architectures:-}" ]]
  then
    # Set the build & host type
    if [[ "Power Macintosh" == "$(/usr/sbin/sysctl -n hw.machine)" ]]
    then
      true # Do nothing ?
    elif [[ "$(/usr/sbin/sysctl -n hw.cpu64bit_capable)" == 1 || \
      "$(/usr/sbin/sysctl -n hw.optional.x86_64)" == 1 ]]
    then
      #   64 bit capable
      if [[ "x86_64" == "${rvm_architectures:-""}" ]]
      then
        rvm_configure_flags="${rvm_configure_flags} \
          --build=x86_64-apple-darwin$(uname -r) \
          --host=x86_64-apple-darwin$(uname -r)"

      elif [[ "i386" == "${rvm_architectures:-""}" ]]
      then
        rvm_configure_flags="${rvm_configure_flags} \
          --build=i386-apple-darwin$(uname -r) \
          --host=i386-apple-darwin$(uname -r)"
      fi
    fi
  fi

  return 0
}

__rvm_mono_env()
{
  DYLD_LIBRARY_PATH="${rvm_usr_path}/lib:$DYLD_LIBRARY_PATH"
  C_INCLUDE_PATH="${rvm_usr_path}/include:$C_INCLUDE_PATH"
  ACLOCAL_PATH="${rvm_usr_path}/share/aclocal"
  ACLOCAL_FLAGS="-I $ACLOCAL_PATH"
  PKG_CONFIG_PATH="${rvm_usr_path}/lib/pkgconfig:$PKG_CONFIG_PATH"

  export  DYLD_LIBRARY_PATH C_INCLUDE_PATH ACLOCAL_PATH ACLOCAL_FLAGS PKG_CONFIG_PATH

  __rvm_add_to_path prepend "${rvm_usr_path}/bin"

  builtin hash -r

  return 0
}

# Returns all mri compatible (partly) ruby for use
# with things like rbx etc which require a ruby be installed.
__rvm_mri_rubies()
{
  local versions="${1:-"1.8.|ree|1.9."}" _ruby
  for _ruby in $( find $rvm_rubies_path/ -maxdepth 1 -mindepth 1 -type d -not -type l )
  do
    printf "${_ruby##*/}\n"
  done | grep -E "$versions"
}

# Returns the first mri compatible (partly) ruby for use
# with things like rbx etc which require a ruby be installed.
__rvm_mri_ruby()
{
  local versions="${1:-"1.8.|ree|1.9."}"
  _mri_rubies=( $( __rvm_mri_rubies "$versions" ) )
  _current_ruby=$(__rvm_env_string)
  if [[ " ${_mri_rubies[*]} " =~ " ${_current_ruby} " ]]
  then
    printf "${_current_ruby}\n"
  else
    for _ruby in ${_mri_rubies[@]}
    do
      printf "${_ruby}\n"
    done | sort | head -n 1
  fi
  return 0
}

__rvm_ensure_has_mri_ruby()
{
  local versions="${1:-"1.8.|ree|1.9."}"
  if [[ -z "$(__rvm_mri_ruby $versions)" ]]
  then
    local compat_result=0
    if ! ( "$rvm_bin_path"/rvm install 1.8.7 )
    then
      rvm_error "
To proceed rvm requires a 1.8-compatible ruby is installed.
We attempted to install 1.8.7 automatically but it failed.
Please install it manually (or a compatible alternative) to proceed.
"
      compat_result=1
    fi
    return $compat_result
  fi

  return 0
}
