#!/usr/bin/env bash

# Checks to see if a package is even available in Debian or Ubuntu without
# having to know the distro specifics.  So if you send it a list of
# depenencies it will take the list and only return the ones that are
# available with apt.

requirements_debian_fallback_lib_available()
{
  for __package
  do
    if
      apt-cache show "${__package}" >/dev/null 2>&1
    then
      __available_dependencies+=( "${__package}" )
    fi
  done
}

# Takes a list of packages that we want to check for "alternates" and if
# any of them are installed then we return the first one installed and
# if none of them are installed we send back our preference which should
# always be the first one to check for when passing in the list.
#
# requirements_debian_fallback_lib_installed "git" "git-core"
#   -> Is git-core installed?
#      -> Return "git-core" because they prefer it.
#   -> Git-core is not installed, we prefer "git" return it.

requirements_debian_fallback_lib_installed()
{
  for __package
  do
    if
      requirements_debian_lib_installed "${__package}"
    then
      requirements_check "${__package}"
      return 0
    fi
  done
  requirements_check "$1"
}

# Takes a list of dependencies and first sees if they are available and then
# takes the ones that are avilable and checks to see if any of them are
# installed finally returning either the one that is installed or the one
# that we recommend.  So:
#
# requirements_debian_fallback_lib "openjdk-7-headless" "openjdk-6-headless"
#   -> Are they all available?
#      -> Returns ("openjdk-7-headless" "openjdk-6-headless")
#   -> Are any of them installed?
#      -> If yes (openjdk-6-headless) then return openjdk-6-headless.
#      -> If no then we return openjdk-7-headless since we prefer it here.

requirements_debian_fallback_lib()
{
  typeset -a __available_dependencies
  __available_dependencies=()
  typeset __package
  requirements_debian_fallback_lib_available "$@"
  requirements_debian_fallback_lib_installed "${__available_dependencies[@]}"
}

# Returns the arch:
#   amd64 || i386 or other doesn't matter to us.

requirements_debian_arch()
{
  __architecture="$(dpkg --print-architecture)"
}

# Queries the dpkg system for packages that are installed only asking about
# the package name and it's arch, unlike previous version this version
# does infact account for both virtual (depends, sometimes it won't) and
# meta-packages when accounting for an architecture, so feel free to use
# this all over the place if you want.

requirements_debian_lib_installed()
{
  dpkg-query -s "$1:${__architecture}" >/dev/null 2>&1 ||
  dpkg-query -s "$1:all"               >/dev/null 2>&1 ||
  return $?
}

# Installs a lib with apt automatically without any user interaction.
# TODO: Make this so a user can disable the --yes part and approve
#       the updates before they even happen.  Some people don't exactly
#       like being left outside of the loop when installing stuffs.

requirements_debian_libs_install()
{
  __rvm_try_sudo apt-get --no-install-recommends --yes install "$@" || return $?
}

# The actual code that runs when you do rvm install jruby-head, ruby2.0.0
# or whatever you are installing.

requirements_debian_update_system()
{
  __rvm_try_sudo apt-get --quiet --yes update || return $?
}

requirements_debian_define()
{
  typeset __architecture
  requirements_debian_arch

  case "$1" in
    (update-system)
      true
      ;;

    (rvm)
      requirements_check bash curl patch bzip2 ca-certificates
      ;;

    (jruby*head)
      requirements_check g++ ant
      requirements_debian_fallback_lib \
        openjdk-7-jdk oracle-j2sdk1.7 \
        opendjk-6-jdk oracle-j2sdk1.6
      requirements_debian_fallback_lib git git-core
      ;;

    (jruby*)
      requirements_check g++
      requirements_debian_fallback_lib \
        openjdk-7-jre-headless openjdk-7-jdk oracle-j2sdk1.7 \
        openjdk-6-jre-headless opendjk-6-jdk oracle-j2sdk1.6
      ;;

    (ir*)
      requirements_check curl mono-2.0-devel
      ;;

    (opal)
      requirements_check nodejs npm
      ;;

    (*-head)
      requirements_debian_fallback_lib git git-core
      requirements_debian_define default
      ;;

    (*)
      requirements_check \
        g++ gcc make libc6-dev patch openssl ca-certificates libreadline6 \
        libreadline6-dev curl zlib1g zlib1g-dev libssl-dev libyaml-dev \
        libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev autoconf libc6-dev \
        libgdbm-dev libncurses5-dev automake libtool bison pkg-config libffi-dev
      ;;
  esac
}

requirements_ubuntu_define()
{
  __lib_type=debian
  requirements_debian_define "$@"
}

requirements_mint_define()
{
  __lib_type=debian
  requirements_debian_define "$@"
}
