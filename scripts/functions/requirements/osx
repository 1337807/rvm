#!/usr/bin/env bash

requirements_brew_lib_install()
{
  typeset brew_lib
  brew_lib="$1"
  brew ls -1 | grep "^${brew_lib}$" >/dev/null ||
  case "$rvm_autolibs_flag" in
    (0|1)
      rvm_debug "Could not find ${brew_lib} in Homebrew"
      return 0 # just ignore
      ;;
    (2)
      rvm_warn "Could not find ${brew_lib} in Homebrew"
      return 0
      ;;
    (*) # 3+
      __rvm_log_command brew_install_${brew_lib} "Installing ${brew_lib} with HomeBrew" \
        brew install ${brew_lib} ||
        return $?
      ;;
  esac
}

requirements_brew_lib()
{
  typeset brew_lib brew_lib_prefix
  brew_lib="$2"

  requirements_brew_lib_install "${brew_lib}" || return $?

  if
    brew_lib_prefix="$( brew --prefix "${brew_lib}" 2>/dev/null )" &&
    [[ -n "${brew_lib_prefix}" && -d "${brew_lib_prefix}" ]]
  then
    __rvm_update_configure_opt_dir "$1" "${brew_lib_prefix}"
  fi
}

requirements_brew_install_brew()
{
  typeset homebrew_home
  if (( UID == 0 ))
  then homebrew_home="/usr/local"
  else homebrew_home="$HOME/.homebrew"
  fi
  mkdir -p "${homebrew_home}" || return $?
  set -o pipefail
  curl -fkL https://github.com/mxcl/homebrew/tarball/master |
  tar xz --strip 1 -C "${homebrew_home}" ||
    return $?
  chmod +x "${homebrew_home}/bin/brew" # just in case
  ln -nfs "${homebrew_home}/bin/brew" "${rvm_bin_path:-$rvm_path/bin}/brew"
}

requirements_brew_ensure_brew()
{
  which brew >/dev/null ||
  {
    case "${rvm_autolibs_flag}" in
      (0|1)
        rvm_debug "homebrew is not available - skipping."
        return 0 # just ignore
        ;;
      (2|3)
        rvm_error "Requested installation with homebrew libs, but homebrew is not available."
        return 1
        ;;
      (*) # 4+
        __rvm_log_command brew_install "Installing homebrew" \
          requirements_brew_install_brew ||
          return $?
        ;;
    esac
  }
}

requirements_brew_default()
{
  typeset -a brew_libs
  typeset brew_lib

  brew tap | grep homebrew-dupes >/dev/null || brew tap homebrew/dupes || return $?

  brew_libs=(
    autoconf automake apple-gcc42 libtool pkg-config
  )
  for brew_lib in  "${brew_libs[@]}"
  do requirements_brew_lib_install "${brew_lib}" || return $?
  done

  brew_libs=(
    libyaml readline libxml2 libxslt libksba openssl curl-ca-bundle sqlite
  )
  for brew_lib in "${brew_libs[@]}"
  do requirements_brew_lib "$1" "${brew_lib}" "${ruby_lib}" || return $?
  done
}

requirements_brew()
{
  requirements_brew_ensure_brew || return $?

  case "$1" in
    (update-system)
      brew update || return $?
      ;;
    (rvm)
      requirements_brew_lib_install git || return $?
      ;;
    (jruby*)
      which java >/dev/null 2>&1 || return $?
      ;;
    (ir*)
      which mono >/dev/null 2>&1 || return $?
      ;;
    (opal)
      "${command_to_run[@]}" brew install node
      ;;
    (*)
      requirements_brew_default "$1"
      ;;
  esac
}

requirements_osx()
{
  # TODO: extra logic for detecting other package managers
  #if
  #  \which brew >/dev/null 2>&1
  #then
    requirements_brew "$@" || return $?
  #else
  #  requirements_osx_show "$@"
  #fi
}
