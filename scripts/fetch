#!/usr/bin/env bash

url="$1"
archive="$2"

shift ||
  rvm_fail "BUG: $0 called without an argument :/"

builtin command -v curl > /dev/null ||
  rvm_fail "rvm requires curl. curl was not found in your current PATH."

rvm_base_except="selector"
source "$rvm_scripts_path/base"

# handled by teardown - scripts/functions/environment:314
__rvm_cleanup_download()
{
  [[ -f "$archive" ]] && __rvm_rm_rf "$archive"
}

builtin cd "$rvm_archives_path"

[[ -n "$archive" ]] || archive=$(basename "$url")
fetch_command="curl ${rvm_proxy:+-x}${rvm_proxy:-} -f -L --create-dirs -C - -o ${archive}"
rvm_debug "Fetching: $archive"
rvm_debug "Fetch command: $fetch_command"

download=1
try_ftp=0
result=0
retry=0

[[ -n "$archive_md5" ]]   || archive_md5="$( "$rvm_scripts_path/db" "$rvm_path/config/md5" "$url"      | head -n 1 )"
[[ -n "$archive_md5" ]]   || archive_md5="$( "$rvm_scripts_path/db" "$rvm_user_path/md5"   "$url"      | head -n 1 )"
if
  [[ "$url" =~ "?" ]] # try url without ?... like ?rvm={version}
then
  [[ -n "$archive_md5" ]] || archive_md5="$( "$rvm_scripts_path/db" "$rvm_path/config/md5" "${url%?*}" | head -n 1 )"
  [[ -n "$archive_md5" ]] || archive_md5="$( "$rvm_scripts_path/db" "$rvm_user_path/md5"   "${url%?*}" | head -n 1 )"
fi
[[ -n "$archive_md5" ]]   || archive_md5="$( "$rvm_scripts_path/db" "$rvm_path/config/md5" "$archive"  | head -n 1 )"
[[ -n "$archive_md5" ]]   || archive_md5="$( "$rvm_scripts_path/db" "$rvm_user_path/md5"   "$archive"  | head -n 1 )"
[[ -n "$archive_md5" ]]   || rvm_warn "There is no md5 for '$archive', it's not possible to validate it."

# Check first if we have the correct archive
if
  [[ -e "$archive" && -n "$archive_md5" ]]
then
  if
    "$rvm_scripts_path"/md5 "$rvm_archives_path/${archive}" "$archive_md5"
  then
    rvm_debug "Archive md5 matched, not downloading"
    download=0
  else
    rvm_debug "Archive md5 did not match, downloading"
    download=1
  fi
else
  rvm_debug "No archive or no MD5, downloading"
  download=1
fi

if
  (( download > 0 ))
then
  rm -f $archive
  if
    eval $fetch_command "$url"
  then
    true
  else
    reult=$?
    case "$result" in
      (22|78)
        rvm_error "The requested url does not exist($result): '$url'"
        try_ftp=1
        ;;
      (18)
        rvm_error "Partial file($result). Only a part of the file was transferred. Removing partial and re-trying."
        rm -f "$archive"
        retry=1
        ;;
      (33)
        rvm_debug "Server does not support 'range' command($result), removing '$archive'"
        rm -f "$archive"
        retry=1
        ;;
      (*)
        rvm_error "There was an error($result), please check ${rvm_log_path}/$rvm_ruby_string/*.log. Next we'll try to fetch via http."
        try_ftp=1
        ;;
    esac
    if
      [[ $try_ftp -eq 1 ]]
    then
      rvm_log "Trying ftp:// URL instead."
      url="${url/http:/ftp:/}"
      retry=1
    fi
    if
      [[ $retry -eq 1 ]]
    then
      if
        eval $fetch_command "$url"
      then
        true
      else
        result=$?
        rvm_fail "There was an error($result), please check ${rvm_log_path}/$rvm_ruby_string/*.log" $result
      fi
    fi
  fi
fi

# Check if we have downloaded the correct archive
if
  [[ -n "$archive_md5" ]]
then
  if
    "$rvm_scripts_path"/md5 "$rvm_archives_path/${archive}" "$archive_md5"
  then
    rvm_debug "Downloaded archive md5 matched."
  else
    rm -f $archive
    rvm_fail "Downloaded archive md5 did not match, removing!"
  fi
else
  rvm_debug "No md5, recording."
  archive_md5="$( "$rvm_scripts_path"/md5 "$rvm_archives_path/${archive}" )"
  "$rvm_scripts_path/db" "$rvm_user_path/md5" "$archive" "$archive_md5"
fi
