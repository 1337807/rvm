#!/bin/bash

# Project: btu - Bash Test::Unit - "The Heat"
# Author:  Wayne E. Seguin
# Version: 0.0.1

#
# Public Methods
#
push() {
  array=$1 ; shift ; item=$2
  # TODO: allow loop over more arguments.
  eval "${array}[\${#${array}[*]}]=${item}"
}

btu_init() {
  __btu_tests=() ; __btu_assertions=() ; __btu_passed=() ; __btu_failed=()
}

btu_summary() {
  echo -e "\n$(__color "cyan")${#__btu_tests[*]}$(__color) tests, ${#__btu_assertions[*]} assertions, $(__color "green")${#__btu_passed[*]}$(__color) passed, $(__color "red")${#__btu_failed[*]}$(__color) failed\n"
  unset __btu_tests __btu_assertions __btu_passed __btu_failed
}

btu_test() {
  __btu_test_command="$1"
  __btu_log "test" "$*"
  push __btu_tests $__btu_test_command
  eval $__btu_test_command
}

assert() {
  key=$1 ; first=$2 ; second=$3
  assertion="__btu_assert_${key} $first $second"
  push __btu_assertions $assertion
  eval $assertion
  result=$?
  if [ $result -eq 0 ]; then
    push __btu_passed $assertion
  else
    push __btu_failed $assertion
  fi ; unset assertion
}

#
# Private Methods
#
__color() {
  case "$1" in
    # regular colors
    black)    echo -n '\033[0;30m' ;;
    red)      echo -n '\033[0;31m' ;;
    green)    echo -n '\033[0;32m' ;;
    yellow)   echo -n '\033[0;33m' ;;
    blue)     echo -n '\033[0;34m' ;;
    magenta)  echo -n '\033[0;35m' ;;
    cyan)     echo -n '\033[0;36m' ;;
    white)    echo -n '\033[0;37m' ;;

    # emphasized (bolded) colors
    eblack)   echo -n '\033[1;30m' ;;
    ered)     echo -n '\033[1;31m' ;;
    egreen)   echo -n '\033[1;32m' ;;
    eyellow)  echo -n '\033[1;33m' ;;
    eblue)    echo -n '\033[1;34m' ;;
    emagenta) echo -n '\033[1;35m' ;;
    ecyan)    echo -n '\033[1;36m' ;;
    ewhite)   echo -n '\033[1;37m' ;;

    # underlined colors
    ublack)   echo -n '\033[4;30m' ;;
    ured)     echo -n '\033[4;31m' ;;
    ugreen)   echo -n '\033[4;32m' ;;
    uyellow)  echo -n '\033[4;33m' ;;
    ublue)    echo -n '\033[4;34m' ;;
    umagenta) echo -n '\033[4;35m' ;;
    ucyan)    echo -n '\033[4;36m' ;;
    uwhite)   echo -n '\033[4;37m' ;;

    # background colors
    bblack)   echo -n '\033[40m' ;;
    bred)     echo -n '\033[41m' ;;
    bgreen)   echo -n '\033[42m' ;;
    byellow)  echo -n '\033[43m' ;;
    bblue)    echo -n '\033[44m' ;;
    bmagenta) echo -n '\033[45m' ;;
    bcyan)    echo -n '\033[46m' ;;
    bwhite)   echo -n '\033[47m' ;;
    none)     echo -n '\033[0m'  ;;
    *)        echo -n '\033[0m' # Reset
  esac
}

__btu_log() {
  result=0
  if [ ! -z "$1" ] ; then level=$1 ; shift ; else level="info" ; fi
  message="$*"
  case "$level" in
    test)  echo -n -e "\n\033[0;36mtest: $message \033[0m\n" ; unset message ;;
    debug) echo -n -e "  \033[0;35mdebug: \033[0m" ;;
    pass)  echo -n -e "  \033[0;32mpass:  \033[0m" ;;
    pend)  echo -n -e "  \033[0;33mpend:  \033[0m" ;;
    error) echo -n -e "  \033[0;31merror: \033[0m" ; result=1 ;;
    fail)  echo -n -e "  \033[0;31mfail:  \033[0m" ; result=1 ;;
  esac
  if [ ! -z "$message" ] ; then echo -n -e "$*\n" ; fi
  unset level message
  return $result
}

__btu_db() {
  db_file=$1 ; shift ; touch $db_file
  key="$1" ; shift
  if [ -z "$key" ] ; then
    __btu_log "fail" "__btu_db must be called with at least two arguments: __rvm_db file key [value]"
  else
    value="$*"
    if [ "$value" = "unset" -o "$value" = "delete" ] ; then
      sed -i.tmp "s/^$key=.*$//" $db_file
    else
      if [ -z "$value" ] ; then # get
        awk -F'=' "/^$key/{\$1=NULL ; print ; exit}" $db_file
      else # set
        if [ -z "$(awk -F'=' "/^$key/{print ; exit}" $db_file)" ] ; then # append
          echo "$key=$value" >> $db_file
        else # overwrite
          sed -i.tmp "s/^$key=.*$/$key=$value/" $db_file
        fi
      fi
    fi
  fi
  unset db_file
}
# Assert that string 1 is found in string 2
__btu_assert_match() {
  regex=$(echo $1 | sed 's/\//\\\//g')
  if [ ! -z $(echo $2 | awk "/$regex/") ] ; then
    __btu_log "pass" "/$regex/ $(__color "green")matches$(__color) '$2'"
  else
    __btu_log "fail" "/$regex/ $(__color "red")does not match$(__color) '$2'"
  fi
  return $?
}

__btu_assert_block_special_file() {
  if [ -b $1 ] ; then
    __btu_log "pass" "'$1' exists and is a block special file."
  else
    __btu_log "fail" "'$1' is not a block special file."
  fi
  return $?
}

__btu_assert_character_special_file() {
  if [ -c $1 ] ; then
    __btu_log "pass" "'$1' exists and is a character special file."
  else
    __btu_log "fail" "'$1' is not a character special file."
  fi
  return $?
}

__btu_assert_directory() {
  if [ -d $1 ] ; then
    __btu_log "pass" "'$1' exists and is a directory."
  else
    __btu_log "fail" "'$1' is not a directory."
  fi
  return $?
}

__btu_assert_file_exists() {
  if [ -e $1 ] ; then
    __btu_log "pass" "'$1' exists."
  else
    __btu_log "fail" "'$1' does not exist."
  fi
  return $?
}

__btu_assert_regular_file() {
  if [ -f $1 ] ; then
    __btu_log "pass" "'$1' exists and is a regular file."
  else
    __btu_log "fail" "'$1' is not a regular file."
  fi
  return $?
}

__btu_assert_group_id_set() {
  if [ -g $1 ] ; then
    __btu_log "pass" "'$1' exists and its set group ID flag is set."
  else
    __btu_log "fail" "'$1' does not have it's group id set."
  fi
  return $?
}

__btu_assert_symbolic_link() {
  if [ -L $1 ] ; then
    __btu_log "pass" "'$1' exists and is a symbolic link."
  else
    __btu_log "fail" "'$1' is not a symbolic link."
  fi
  return $?
}

__btu_assert_sticky_bit_set() {
  if [ -k $1 ] ; then
    __btu_log "pass" "'$1' exists and its sticky bit is set."
  else
    __btu_log "fail" "'$1' does not have it's sticky bit set."
  fi
  return $?
}

__btu_assert_named_pipe() {
  if [ -p $1 ] ; then
    __btu_log "pass" "'$1' is a named pipe (FIFO)."
  else
    __btu_log "fail" "'$1' is not a named pipe."
  fi
  return $?
}

__btu_assert_readable_file() {
  if [ -r $1 ] ; then
    __btu_log "pass" "'$1' exists and is readable."
  else
    __btu_log "fail" "'$1' is not readable."
  fi
  return $?
}

__btu_assert_non_empty_file() {
  if [ -s $1 ] ; then
    __btu_log "pass" "'$1' exists and has a size greater than zero."
  else
    __btu_log "fail" "'$1' has zero size."
  fi
  return $?
}

__btu_assert_terminal() {
  if [ -t $1 ] ; then
    __btu_log "pass" "'$1' is open and is associated with a terminal."
  else
    __btu_log "fail" "'$1' is not a terminal."
  fi
  return $?
}

__btu_assert_user_id_set() {
  if [ -u $1 ] ; then
    __btu_log "pass" "'$1' exists and its set user ID flag is set."
  else
    __btu_log "fail" "'$1' does not have setuid bit set."
  fi
  return $?
}

__btu_assert_writable() {
  if [ -w $1 ] ; then
    __btu_log "pass" "'$1' has write flag set."
  else
    __btu_log "fail" "'$1' is not writable."
  fi
  return $?
}

__btu_assert_executable() {
  if [ -x $1 ] ; then
    __btu_log "pass" "'$1' has execute flag set."
  else
    __btu_log "fail" "'$1' is not executable."
  fi
  return $?
}

__btu_assert_string_empty() {
  if [ -z $1 ] ; then
    __btu_log "pass" "the length of string is zero."
  else
    __btu_log "fail" "'$1' is non-empty."
  fi
  return $?
}

__btu_assert_file_effective_user_set() {
  if [ -O $1 ] ; then
    __btu_log "pass" "'$1' file exists and its owner matches the effective user id of this process."
  else
    __btu_log "fail" "'$1' owner does not match effective user id of current process."
  fi
  return $?
}

__btu_assert_file_effective_group_set() {
  if [ -G $1 ] ; then
    __btu_log "pass" "'$1' file exists and its group matches the effective group id of this process."
  else
    __btu_log "fail" "'$1' group does not match effective group id of current process."
  fi
  return $?
}

__btu_assert_file_is_socket() {
  if [ -S $1 ] ; then
    __btu_log "pass" "'$1' file exists and is a socket."
  else
    __btu_log "fail" "'$1' is not a socket."
  fi
  return $?
}

__btu_assert_files_newer_than() {
  if [ $1 -nt $2 ] ; then
    __btu_log "pass" "'$1' file1 exists and is newer than file2."
  else
    __btu_log "fail" "'$1' is not newer than '$2'."
  fi
  return $?
}

__btu_assert_files_older_than() {
  if [ $1 -ot $2 ] ; then
    __btu_log "pass" "'$1' file1 exists and is older than file2."
  else
    __btu_log "fail" "'$1' is not older than '$2'."
  fi
  return $?
}

__btu_assert_files_identical() {
  if [ $1 -ef $2 ] ; then
    __btu_log "pass" "'$1' file1 and file2 exist and refer to the same file."
  else
    __btu_log "fail" "'$1' and '$2' are not the same file."
  fi
  return $?
}

__btu_assert_string_non_empty() {
  if [ -n $1 ] ; then
    __btu_log "pass" "'$1' has non-zero length."
  else
    __btu_log "fail" "'$1' has zero length."
  fi
  return $?
}

__btu_assert_string_not_null() {
  if [ $1 ] ; then
    __btu_log "pass" "'$1' is not the null string."
  else
    __btu_log "fail" "is the null string."
  fi
  return $?
}

__btu_assert_string_eq() {
  if [ $1 = $2 ] ; then
    __btu_log "pass" "'$1' the strings s1 and s2 are equal."
  else
    __btu_log "fail" "'$1' is not the same as '$2'."
  fi
  return $?
}

__btu_assert_string_ne() {
  if [ $1 != $2 ] ; then
    __btu_log "pass" "'$1' the strings s1 and s2 are not equal."
  else
    __btu_log "fail" "'$1' is identical to '$2'."
  fi
  return $?
}

__btu_assert_string_lt() {
  if [ $1 < $2 ] ; then
    __btu_log "pass" "string s1 comes before s2 ( ASCII )"
  else
    __btu_log "fail" "'$1' is not less than '$2' ( ASCII )"
  fi
  return $?
}

__btu_assert_string_gt() {
  if [ $1 > $2 ] ; then
    __btu_log "pass" "'$1' string s1 comes after s2 based on the ( ASCII )"
  else
    __btu_log "fail" "'$1' is not greater than '$2' ( ASCII )"
  fi
  return $?
}

__btu_assert_number_eq() {
  if [ $1 -eq $2 ] ; then
    __btu_log "pass" "the integers '$1' and '$2' are algebraically equal."
  else
    __btu_log "fail" "'$1' is not equal to '$2'."
  fi
  return $?
}

__btu_assert_number_ne() {
  if [ $1 -ne $2 ] ; then
    __btu_log "pass" "the integers '$1' and '$2' are not algebraically equal."
  else
    __btu_log "fail" "'$1' is equal to '$2'."
  fi
  return $?
}

__btu_assert_number_gt() {
  if [ $1 -gt $2 ] ; then
    __btu_log "pass" "the integer '$1' is algebraically greater than the integer '$2'."
  else
    __btu_log "fail" "'$1' is not greater than '$2'."
  fi
  return $?
}

__btu_assert_number_ge() {
  if [ $1 -ge $2 ] ; then
    __btu_log "pass" "the integer '$1' is algebraically greater than or equal to the integer '$2'."
  else
    __btu_log "fail" "'$1' is not greater than or equal to '$2'."
  fi
  return $?
}

__btu_assert_number_lt() {
  if [ $1 -lt $2 ] ; then
    __btu_log "pass" "the integer '$1' is algebraically less than the integer '$2'."
  else
    __btu_log "fail" "'$1' is not less than '$2'."
  fi
  return $?
}

__btu_assert_number_le() {
  if [ $1 -le $2 ] ; then
    __btu_log "pass" "the integer '$1' is algebraically less than or equal to the integer '$2'."
  else
    __btu_log "fail" "'$1' is not less than or equal to '$2'."
  fi
  return $?
}

