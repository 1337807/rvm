%a{ :name => "patchlevel" }
%h1
  Patch Levels with rvm
%p
  For each C based interpreter you can also specify a patchlevel using the '-l' or '--level' options.
  Each interpreter defaults to the latest patchlevel known to rvm.
  For example, rvm (as of this writing) defaults ruby 1.8.7 to patchlevel 174.
  If you wanted to switch to patchlevel 160 to test something out you can easily do that by:

%pre.code
  :preserve
    ∴ rvm  1.8.7 -l 160

    ruby 1.8.7 is not installed.

    Installing Ruby from source to: ...

    ∴ ruby -v

    ruby 1.8.7 (2009-04-08 patchlevel 160) [i686-darwin9.8.0]
%p
  which will download, compile and install ruby-1.8.7-p160 and then set it to current.
  Switching between patchlevels is very easy:
%pre.code
  :preserve
    ∴ rvm  1.8.7 -l 160

    Switching to ruby 1.8.7 160 ...

    ∴ ruby -v

    ruby 1.8.7 (2009-04-08 patchlevel 160) [i686-darwin9.8.0]

    ∴ rvm  1.8.7 -l 174

    Switching to ruby 1.8.7 174 ...

    ∴ ruby -v

    ruby 1.8.7 (2009-06-12 patchlevel 174) [i686-darwin9.8.0]
%p
  Don't forget about the shorthand due to defaults. The above is equivalent to
%pre.code
  :preserve
    ∴ rvm 1.8.7 -l 160    # same as: rvm  1.8.7 -l 160
    ∴ rvm 1.8.7 -l 174    # same as: rvm  1.8.7 -l 174
